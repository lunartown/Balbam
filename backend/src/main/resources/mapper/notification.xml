<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="com.ssafy.notification.model.mapper.NotificationMapper">

	<resultMap type="notificationDto" id="notification">
		<result column="notification_id" property="notificationId" />
		<result column="title" property="title" />
		<result column="content" property="content" />
		<result column="create_time" property="createTime" />
		<result column="category" property="category" />
		<result column="user_id" property="userId" />
	</resultMap>

	<resultMap type="notificationQuestionDto" id="question">
		<result column="question_id" property="questionId" />
		<result column="title" property="title" />
		<result column="content" property="content" />
	</resultMap>

	<resultMap type="inquiryDto" id="inquiry">
		<result column="inquiry_id" property="inquiryId" />
		<result column="answer_id" property="answerId" />
		<result column="user_id" property="userId" />
		<result column="answer_user_id" property="answerUserId" />
		<result column="answer_author" property="answerAuthor" />
		<result column="title" property="title" />
		<result column="content" property="content" />
		<result column="answer_content" property="answerContent" />
		<result column="create_time" property="createTime" />
		<result column="answer_time" property="answerTime" />
	</resultMap>

	<sql id="search">
		<if test="word != null and word != ''">
			<if test="key != ''">
					and title like concat('%', #{word}, '%')
			</if>
		</if>
	</sql>

	<sql id="catOrRegionCheck">
		<if test="catOrRegion != null and catOrRegion != ''">
			and category = #{catOrRegion}
		</if>
	</sql>


	<select id="selectNotification" parameterType="int"
		resultMap="notification">
		select notification_id, title, content, create_time,
		user_id, category
		from notification
		where
		notification_id =
		#{notificationId};
	</select>

	<select id="selectListNotification"
		parameterType="searchCondition" resultMap="notification">
		select notification_id, user_id, title, create_time, category
		from
		notification
		<where>
			<include refid="search" />
			<include refid="catOrRegionCheck" />
		</where>
		order by notification_id desc
		limit #{startIndex}, #{countPerPage}
	</select>

	<select id="getTotalNotificationCount"
		parameterType="searchCondition" resultType="int">
		select count(notification_id)
		from notification
		<where>
			<include refid="search" />
			<include refid="catOrRegionCheck" />
		</where>
	</select>

	<insert id="writeNotification" parameterType="notificationDto">
		insert into
		notification(title, content, create_time, user_id, category)
		values(#{title},
		#{content}, now(), #{userId}, #{category});
	</insert>

	<delete id="deleteNotification" parameterType="int">
		delete from
		notification
		where notification_id = #{notificationId}
	</delete>

	<update id="updateNotification" parameterType="notificationDto">
		update
		notification set
		title = #{title}, content = #{content}
		where
		notification_id = #{notificationId}
	</update>


	<select id="selectQuestion" parameterType="searchCondition"
		resultMap="question">
		select question_id, title, content
		from questions
		<where>
			<include refid="search" />
		</where>
		order by question_id desc
		limit #{startIndex}, #{countPerPage}
	</select>

	<select id="getTotalQuestionCount"
		parameterType="searchCondition" resultType="int">
		select count(question_id)
		from questions
		<where>
			<include refid="search" />
		</where>
	</select>

	<select id="selectListInquiry" parameterType="int"
		resultMap="inquiry">
		select a.inquiry_id, b.answer_id, a.user_id, b.user_id
		answer_user_id,
		a.title, a.content, b.content answer_content,
		a.create_time, b.create_time answer_time, if(b.answer_id is null,
		null, (select name
		from user c where c.user_id = b.user_id))
		answer_author
		from inquiry a left outer join inquiry_answer b
		on
		a.inquiry_id = b.inquiry_id
		<if test="userId != 0">where a.user_id = #{userId}</if>

	</select>

	<insert id="writeInquiry" parameterType="inquiryDto">
		insert into
		inquiry(title, content, create_time, user_id)
		values(#{title},
		#{content}, now(), #{userId});
	</insert>
	<update id="updateInquiry" parameterType="inquiryDto">
		update
		inquiry set
		title = #{title}, content = #{content}
		where
		inquiry_id =
		#{inquiryId}
	</update>
	<insert id="writeAnswer" parameterType="inquiryDto">
		insert into
		inquiry_answer(inquiry_id, content, create_time, user_id)
		values(#{inquiryId},
		#{content}, now(), #{userId});
	</insert>
	<update id="updateAnswer" parameterType="inquiryDto">
		update
		inquiry_answer set
		 content = #{content}
		where
		answer_id =
		#{answerId}
	</update>
</mapper>